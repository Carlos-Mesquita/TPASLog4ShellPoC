import { useState, useCallback, useEffect } from 'react';
import { FaSmile } from 'react-icons/fa';
import { GiDevilMask } from 'react-icons/gi';

export const useExploitMode = (size: number) => {
    const [safe, setSafe] = useState<boolean | null>(null);

    const fetchLogger = useCallback(async () => {
        try {
            const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/logger/type`);
            if (!response.ok) {
                throw new Error('Failed to fetch logger type');
            }
            const text = await response.text();
            setSafe(text === "safe");
        } catch (err) {
            console.error(err instanceof Error ? err.message : 'An unknown error occurred');
        }
    }, []);

    const toggleSafeMode = useCallback(async () => {
        if (typeof window !== 'undefined' && process.env.NEXT_PUBLIC_BACKEND_URL && safe !== null) {
            try {
                const type = safe ? 'vulnerable' : 'safe';
                const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/logger/toggle`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ type }),
                });

                if (!response.ok) {
                    throw new Error('Failed to toggle logger');
                }
                setSafe(!safe);
                console.log('Logger toggled successfully');
            } catch (err) {
                console.error(err instanceof Error ? err.message : 'An unknown error occurred');
            }
        }
    }, [safe]);

    useEffect(() => {
        fetchLogger();
    }, [fetchLogger]);

    const handleButtonClick = () => {
        if (safe !== null) {
            toggleSafeMode();
        }
    };

    const renderIcon = () => (
        <button onClick={handleButtonClick} disabled={safe === null}>
            {safe === null ? (
                "Loading..."
            ) : safe ? (
                <FaSmile color="lime" size={size} />
            ) : (
                <GiDevilMask color="red" size={size} />
            )}
        </button>
    );

    return renderIcon;
};